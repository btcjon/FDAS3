[{
  "markdown": "## Welcome to BuildShip\n\nA Low-code Visual Backend Builder, powered by AI ✨ Use BuildShip to create:\n\n*   Scalable APIs\n*   Scheduled tasks / CRON jobs\n*   Backend cloud functions\n*   Database CRUD or event data triggered functions\n*   WhatsApp, Telegram, Slack, Discord, AI chatbot\n\nBuildShip integrates with any tools like Stripe, Sengrid, Whatsapp or AI model from OpenAI, Replicate etc or database like Firebase, Supabase, Postgres.\n\n🪩 **Best part?** if any integration is missing, don't get stuck - use AI to generate you own workflow nodes. BuildShip gives you the best of no-code with the power of low-code. See the 5 minutes product walkthrough.\n\n  \n\n## Quick Start[](#quick-start)\n\nFollow the learning resources below to get a deeper understanding of the platform:\n\nYou can connect your favorite AI-models, tools, API services, and backend in minutes. Extend your workflow's capabilities with JavaScript / TypeScript code and 1M+ NPM packages! 🤯\n\nBuildShip lets you build scalable backend workflows for the apps you build on any stack. Be it a no-code app builder (FlutterFlow, Webflow, Framer, Adalo, Bubble, BravoStudio ...) or a frontend framework (Next.js, React, Vue ...) - you can build scalable backend tasks for them in minutes. This means you don't need to wrangle or deploy things on the cloud platform, waiting for long build cycles of cloud functions, perform DevOps, etc.\n\nNo-code friendly but code of every node is accessible and tweakable in javascript/typescript. Comes with features like instant deploy (no need to wait for long build cycles), version control, multiple projects, copying workflows from one project to another, large number of templates on popular usecases - whatsapp bot, google vision, stripe payment, and so much more.\n\n✨✨ Just Build and Ship, instantly 🚀\n\n## What's inside? 👀[](#whats-inside-)\n\nBuilt on top of powerful and scalable **Google Cloud Platform (GCP)**, BuildShip give you a friction-free serverless development experience. Now you can quickly transform your ideas into cloud-deployed scripts within seconds, without leaving your browser.\n\nBuildShip uses **Cloud Run** to run your code in a serverless environment. It also supports EventArc-based backend triggers, HTTP and webhook backend triggers, data triggers, and BYOC (Bring Your Own Cloud) compatibility.\n\n## Features 🪄[](#features-)\n\n![BuildShip Features](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ffeatures.8efd0b63.png&w=3840&q=75)\n\n### Combine the power of any AI Model[](#combine-the-power-of-any-ai-model)\n\nIntegrate the leading multimodal AI models and services with your APIs and Workflows like **ChatGPT**, **Stable Diffusion**, **Midjourney**, **DALL-E 2**, and many more.\n\n### The Nodeverse[](#the-nodeverse)\n\nExplore and select from The Nodeverse, our library of pre-built nodes or generate your own using AI. Tweak the nodes to your liking and build your own custom workflows.\n\n### Build with JavaScript / TypeScript[](#build-with-javascript--typescript)\n\nTypical low-code, no-code tools use their own complicated formulae process as you start to building anything meaningful. With BuildShip you can build on javascript / typescript - which has lot of reference materials. So you will not get “**stuck**” 😶‍🌫️ in the tool’s features and can build without limits.\n\n### One of a kind development experience[](#one-of-a-kind-development-experience)\n\nBuildShip provides you with a powerful code editor with autocomplete, localhost like speedy debugging experience, and a sandboxing environment. Build serverless scripts fast, right from your browser! ⚡️ Schedule your function calls, save data to database, connect to any API, use 1M + NPM packages.\n\n## Why use BuildShip? 🚢[](#why-use-buildship-)\n\n*   **Faster development**: BuildShip makes it easy to build and deploy serverless applications, so you can **get your ideas to market faster**.\n*   **Flexible and Extensible**: BuildShip offers the most flexible and powerful platform to build APIs and backend workflows exactly the way you want. You will never be stuck waiting for an integration.\n*   **Lower costs**: It's **serverless**, so you only **pay for the resources you use**. This can save you a lot of money on infrastructure costs. You can build 10x workflows for a whole lot less.\n*   **Scalability**: BuildShip is scalable. So, you can easily scale your applications as your traffic grows!\n*   **GDPR Compliant**: You have option to select your project's location and all your workflows will be deployed to that region, which means your data never leaves your region of choice.\n*   **Security**: Save your API Keys and Secrets on **Google Cloud Secret Manager** of your own single tenant project, so you can be confident that your data is safe.\n*   **Templates to start fast**: 100s of pre-built integrations, from popular AI models like OpenAI text generation, Vector embedding, Sythesia video gen, image gen using Stable Diffusion, or literally use any AI model on platforms like Replicate, Hugging Face, etc., or even the ones that will launch in the future!\n*   **AI-Generated Nodes**: You are not limited with pre-built nodes or the platform. Start from hundreds of pre-built nodes, but if something is missing - don’t wait for BuildShip to release an integration! Simply ask AI and it generates a custom workflow node just for you.\n*   **Custom code**: Readily use any API or 1M+ NPM packages: You can use any NPM package in the workflow node or ask Ask AI to use an NPM package and generate a node for you. Code made accessible - anytime you want: BuildShip is not a black box, you can open the code of any node, tweak it any way you want. Use powerful developer tools like logging, version control, a code editor equipped with autocomplete, a lightning-fast debugger similar to localhost, and a secure sandboxing environment. One-click deploy: When ready, hit “ship” and get your backend workflow deployed instantly! Start fast with templates: We have templates featuring chatbots, music generators, reverse image search using Google Vision API, Vector DB search, HTML to PDF converter, and more! They are the team behind Rowy.io - a popular low-code tool for managing Firestore data and building low-code style on Firebase and Google Cloud. They have a great community already building with low-code and the team has been shipping products fast to help and solve products of the low-code community. The team is part of the first batch of AIGrant.org which has backed top emerging AI companies and their investors include Vercel CEO, execs from Figma, Google, Github and more.\n\n## BuildShip FAQ[](#buildship-faq)\n\nThe BuildShip FAQ is a collection of useful questions and answers about the project. If you have a question that isn't answered here, please [open a discussion](https://buildship.com/discord).\n\n**What is a AI generated node?** **What is the pricing plan?**"
},
{
  "markdown": "## What is a Workflow?\n\nA workflow is a **visual representation of a logical sequence of tasks** designed to achieve a specific goal. Each task is represented by a node, and workflows are constructed to automate processes, streamline tasks, and efficiently respond to various events.\n\n**Key characteristics of workflows include:**\n\n*   **Trigger Nodes:** The first node is a trigger that initiates the workflow\n*   **Nodes:** Each node represents a specific task or action within the workflow\n*   **Return Nodes:** The last node can be a return statement, providing optional final outputs\n\n## How to build a Workflow?[](#how-to-build-a-workflow)\n\nHere's a comprehensive guide to building a workflow using BuildShip:\n\nCongratulations! You've successfully created a dynamic workflow tailored to your needs. 🚀"
},
{
  "markdown": "## What is a Trigger?\n\nTriggers are the basis of the execution of any workflow. Each trigger node **serves as a starting point** for your workflow, allowing you to automate processes based on specific events or schedules. You can only add a single trigger node to a workflow.\n\n![Triggers](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ftriggers1.2a0b5492.png&w=3840&q=75)\n\n## What are Trigger Nodes?[](#what-are-trigger-nodes)\n\nTrigger nodes play a pivotal role in BuildShip as they are the **catalysts responsible for initiating the execution** of a workflow. Think of them as the \"_starting points_\" that kickstart the entire automation process.\n\n![Triggers](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ftriggers2.da6fef44.png&w=3840&q=75)\n\n## Characteristics of a Trigger[](#characteristics-of-a-trigger)\n\n*   Trigger nodes are **responsible for triggering the execution** of a workflow\n*   A workflow can have **only one trigger node**\n*   Trigger nodes **do not have Input / Output manipulation** settings\n\n## Types of Triggers[](#types-of-triggers)\n\nBelow you'll find detailed explaination and examples of our most popular Triggers types:"
},
{
  "markdown": "## What is a Node?\n\nWithin BuildShip, each node is designated to fulfill a specific function, and the combination of nodes forms a complete workflow.\n\n> It's important to note that the initial node in any workflow must be a trigger node (find more information on triggers [here](https://docs.buildship.com/basics/trigger)).\n\nThe fundamental building blocks of a workflow are the logic nodes. Let's delve into the details of a logic node's structure and functionality.\n\n## Node Anatomy[](#node-anatomy)\n\n![Node Anatomy](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fanatomy1.6f577bc7.png&w=3840&q=75)\n\n*   **Open Node Editor** `</>` This feature grants you the power to **modify the logic**, **input parameters**, **output configuration**, and **metadata descriptions** associated with a given node, providing the flexibility to tailor the nodes to your exact requirements.\n    \n*   **Node Options** Manage nodes through **AI-powered editing**, **deletion**, **copying**, and the ability to **view logs** specific to each individual node.\n    \n*   **Value Expression Editor** Tap into the capabilities of **AI data autofill for inputs**, leverage **variables**, and safeguard sensitive information using **secret keys**.\n    \n*   **Expand/Collapse Toggle** Enhance your workspace by toggling between expanded and collapsed views for nodes, ensuring a **clutter-free experience**.\n    \n\n## Edit and Customize Nodes[](#edit-and-customize-nodes)\n\nWhether selecting a node from the **Nodeverse library** or **generating one via AI**, the Node Editor provides a user-friendly environment for configuring nodes.\n\nMoreover, the Node Editor is accompanied by a **testing environment**, enabling users to **edit and test nodes simultaneously**, all without the need for deployment.\n\n## Node Editor `</>`[](#node-editor-)\n\n![script node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fscript-2.2f3a1add.png&w=3840&q=75)\n\nNode Logic is a versatile code editor within BuildShip that empowers users to create and customize the functionality of a node. With Node Logic, you can:\n\n*   Write and modify the underlying functions for a node to suit your specific needs.\n*   Seamlessly integrate with APIs, leverage AI models, or incorporate NPM libraries to enhance your workflow's capabilities.\n\n## Input Params[](#input-params)\n\nInput parameters for a node are variables or values that can be provided as input to the node when it is executed. These parameters serve as the data that the node needs to perform its specific task.\n\nThese parameters can be set in the form UI or via JSON schema.\n\n![script node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fscript-4.400ed623.png&w=3840&q=75)\n\n## Output[](#output)\n\nThe Node Editor empowers you to modify your node's output configurations. The structured JSON format ensures clarity in handling resulting data, promoting seamless integration with downstream processes.\n\n![script node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fscript-4.400ed623.png&w=3840&q=75)\n\n## Node Info[](#node-info)\n\nJust as input parameters are accompanied by comprehensive descriptions, the \"Info\" section contains essential insights about the node's purpose and functionality. This contextual information aids in better understanding the node's role within your workflow.\n\n![script node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fscript-5.4e2aacd5.png&w=3840&q=75)"
},
{
  "markdown": "## Tutorials\n\nStep by step guided tutorial for powerful usecases and examples.\n\n[![Firebase Connection preview](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ffirebase-connection.7c7c31b6.png&w=3840&q=75)Firebase→](https://docs.buildship.com/tutorials/firebase-project)[![Firebase Connection preview](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ffirebase-search-cover.4d2ba171.png&w=3840&q=75)Firebase Full Text Search→](https://docs.buildship.com/tutorials/firebase-full-text-search)[![GCP Storage preview](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fgcp-storage.9d2d6bb5.png&w=3840&q=75)GCP File Storage→](https://docs.buildship.com/tutorials/gcp-storage)[![Supabase CRUD preview](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fsupabase-crud.5827dcf9.png&w=3840&q=75)Supabase→](https://docs.buildship.com/tutorials/supabase-crud)[![Postgres CRUD preview](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostgres-og.ac898d3e.png&w=3840&q=75)Postgres→](https://docs.buildship.com/tutorials/postgres)[![Bring Your Own Key preview](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fbyok-og.8ce1e811.png&w=3840&q=75)Bring Your Own Key→](https://docs.buildship.com/tutorials/byok)\n\n[Introduction](https://docs.buildship.com/ \"Introduction\")[Creating Workflows](https://docs.buildship.com/basics/workflow \"Creating Workflows\")"
},
{
  "markdown": "## Node Inputs\n\nInput parameters for a node are variables or values that can be provided as input to the node when it is executed. These parameters serve as the data that the node needs to perform its specific task.\n\nThe input parameters for a node are defined in the node's **Inputs** section. These parameters **can be set in the form UI or via JSON schema**.\n\n![script node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fscript-3.d3601243.png&w=3840&q=75)\n\n## Structure of the Input Configuration[](#structure-of-the-input-configuration)\n\nThe input configuration is a JSON object that defines the input parameters for a node.\n\n![Import](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Finputs1.622680de.png&w=3840&q=75)\n\nLet's understand the structure using an example, here's a sample input configuration for a node:\n\nIt has the following structure:\n\n*   **properties:** This is an object containing the definition of individual input parameters. In your example, it defines two input parameters: `apiKey` and `texts`.\n    \n*   **type:** This specifies the overall data type of the input. In this case, it is set as \"object,\" indicating that the input parameters are organized within an object structure.\n    \n*   **required:** This is an array that can list any required parameters, but it's currently empty, indicating that none of the parameters are mandatory.\n    \n\n## Input Parameter Definition[](#input-parameter-definition)\n\n![Import](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Finputs2.5e2d465a.png&w=3840&q=75)\n\nThe input parameters are defined as follows:\n\n*   `title`: The user-friendly title or label for the input parameter, which is \"API Key\" in this case.\n*   `description`: Additional information or description of the parameter, which is \"Cohere API Key.\"\n*   `type`: Specifies the data type of the parameter, which is \"string.\"\n*   `pattern`: An optional field, typically used for validating the input value. In this example, it's an empty string.\n*   `buildship`: An object that includes additional metadata for the parameter, such as its index within the list of parameters and whether it is marked as sensitive (containing sensitive or private data)."
},
{
  "markdown": "## Using Variables in Workflows\n\nLearn how to use context variables, HTTP request components, and output values from other nodes in your workflow logic.\n\n## Using Incoming HTTP Request Components[](#using-incoming-http-request-components)\n\nWhen working with the REST API Call Trigger, you can leverage various request components like **Headers**, **Params**, and the **Request Body** to efficiently pass data to your logic nodes.\n\n### Accessing Request Variables[](#accessing-request-variables)\n\n## Using Output values from other nodes[](#using-output-values-from-other-nodes)\n\nWhen you have previously returned values from your logic nodes, you can access them conveniently through the **Expression Menu** `(x)`. To access a specific output, **click on the name of the node** associated with the desired output, and then **select your output variable**. This allows you to conveniently leverage the output values in your current workflow logic.\n\n![Variables](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fvariables4.b27cac4c.png&w=3840&q=75)"
},
{
  "markdown": "## Node Input Validation\n\nIn BuildShip, you have the ability to specify a regular expression pattern for input fields. This allows you to define a pattern that a value must match to be considered valid.\n\nIf the value provided in the input does not match the specified pattern, the workflow will generate a node validation error, preventing the execution of the workflow.\n\n![regex1](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fregex1.d4a1c74d.png&w=3840&q=75)\n\n## How to Specify Validation Regex[](#how-to-specify-validation-regex)\n\nTo configure Validation Regex for an input field, follow these steps:\n\n## Example Validation Regex[](#example-validation-regex)\n\nLet's consider an example using the regular expression pattern `^[A-Za-z0-9]+$`. This specific pattern is designed to match a string that consists of one or more alphanumeric characters, which includes letters (both uppercase and lowercase) and digits.\n\nHere's how the process works:"
},
{
  "markdown": "## Node Output\n\nOutput configuration for a node involves specifying how the node will produce and format its output data. It defines the structure and content of the data that the node will generate as a result of its execution.\n\nThe output configuration is defined in the `output` section of the node configuration file. These parameters **can be set in the form UI or via JSON schema**.\n\n![output1](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Foutput1.0e197dc0.png&w=3840&q=75)\n\n## Structure of the Output Configuration[](#structure-of-the-output-configuration)\n\nThe structure is a JSON object that defines the output configuration for a node.\n\nLet's understand the structure using an example, here's a sample output configuration for a node:\n\n*   `description`: This field provides a brief description of the output. In this case, it describes the output as \"The response from the Cohere detectLanguage API.\"\n    \n*   `type`: Specifies the overarching data type of the output, which is \"object.\" This indicates that the output data will be structured as a JSON object.\n    \n*   `title`: This is a user-friendly title or label for the output, which is \"Cohere Response\" in this example.\n    \n*   `properties`: This field is typically used to define the individual components or variables within the output data. However, in this example, it's empty, which means that there are no specific properties defined for the output."
},
{
  "markdown": "## API Specification\n\nThe API Specification feature allows users to define and structure incoming requests and expected responses for their workflow APIs. This functionality simplifies accessing request values as defined variables throughout the workflow.\n\n## Request Specification[](#request-specification)\n\nUsers can define the expected request structure for the API Call.\n\n*   Click on the **Trigger Menu (•••)** on the **REST API Call Trigger** and click on **Edit**.\n    \n    ![API Specification](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fapi-spec-1.1af991d2.png&w=3840&q=75)\n*   Under the **“Request”** section you’ll see the default request structure.\n    \n*   Click on the **+** icon to add fields to the request schema. You can also click on a field, let’s say `query`, to add nested fields.\n    \n    ![API Specification](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fapi-spec-2.d18fc9ef.png&w=3840&q=75)\n\n## Response Specification[](#response-specification)\n\nUsers can also define the expected response from the API.\n\n*   Click on the `</>` icon on the Return Node to open the **Response Specification**.\n    \n    ![API Specification](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fapi-spec-3.2e93122e.png&w=3840&q=75)\n*   Under the **“Response”** section you’ll see the default response structure.\n    \n\n## Accessing Request Values[](#accessing-request-values)\n\nUsers can access the request values defined in the Request Specification throughout the workflow using the **Context Menu**.\n\n## Example Scenario - Implementing BYOK[](#example-scenario---implementing-byok)\n\nLet's consider implementing a **Bring Your Own Key (BYOK)** system within BuildShip.\n\nWe require incoming API requests to include an `Authorization` header containing the user's API Key. Additionally, the API needs a `prompt` query parameter, which will act as the User Prompt for the OpenAI Text Generator node generating a story.\n\n![API Specification](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fapi-spec-4.e0eb1888.png&w=3840&q=75)\n\nTo modify the Request Definition for this scenario:\n\nThese defined request variables can now be easily accessed via the context menu throughout the workflow."
},
{
  "markdown": "## Reordering Nodes\n\nIn BuildShip, you have the flexibility to rearrange the order of your logic nodes within your workflows. This is useful when you want to change the order of execution of your logic nodes.\n\n## How to Reorder Nodes[](#how-to-reorder-nodes)"
},
{
  "markdown": "## REST API Call Trigger\n\nWith this powerful trigger node, you can initiate automation by **sending HTTP requests to specified URL endpoints**. When setting up the REST API Call Trigger, you define the **path**, choose the **HTTP method** (GET, PUT, POST, DELETE), and create the complete endpoint URL.\n\n![REST API Call Trigger](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Frest-api-1.64ed7334.png&w=3840&q=75)\n\n## Setting up a REST API Call Trigger in BuildShip[](#setting-up-a-rest-api-call-trigger-in-buildship)\n\nTo set up a REST API Call Trigger in your BuildShip workflow, follow these steps:\n\n## Example: Triggering a Workflow with a REST API Call[](#example-triggering-a-workflow-with-a-rest-api-call)\n\n**Calculator - Multiplying two numbers and returning the result**"
},
{
  "markdown": "## Scheduled Cron Trigger\n\nThe Scheduled Cron Trigger node is a powerful tool within BuildShip that enables you to **automate workflows based on scheduled time intervals**. This trigger allows you to **initiate workflows at specific times**, or patterns, ensuring timely execution of your automation tasks.\n\n![Scheduled Cron Trigger](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fcron-1.8047cbe6.png&w=3840&q=75)\n\n## How to Use Scheduled Cron Trigger[](#how-to-use-scheduled-cron-trigger)\n\nThe Scheduled Cron Trigger node comes with three essential fields that you need to configure:\n\n*   **Location**: The **GCP region where the trigger will be executed**. This field is automatically filled based on the GCP region associated with your workspace.\n    \n*   **Schedule**: Set the **schedule pattern using the cron syntax**. This field determines the frequency and timing of your workflow execution. For example, `*/20 * * * *` specifies an interval of 20 minutes.\n    \n\n*   **Time Zone**: Choose the **desired time zone for your scheduled trigger**. You can select from the list of existing time zones.\n\n### Understanding the Cron Syntax[](#understanding-the-cron-syntax)\n\nCRON syntax is a **widely used standard for scheduling tasks** in various Unix-like operating systems. It defines a set of fields that specify when a task should be executed based on time intervals. Each field represents a unit of time, **allowing users to define intricate scheduling patterns**.\n\n![Cron Syntax](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fcron-2.d8377db8.png&w=3840&q=75)\n\nThe CRON syntax consists of five fields, each separated by a space:\n\n1.  **Minute (0 - 59)**: Specifies the minute at which the task should run. A value of \\* indicates any minute, while 0 indicates the exact minute.\n    \n2.  **Hour (0 - 23)**: Specifies the hour at which the task should run. A value of \\* indicates any hour, while 0 indicates midnight.\n    \n3.  **Day of Month (1 - 31)**: Specifies the day of the month when the task should run. A value of \\* indicates any day, while specific numbers represent particular days.\n    \n4.  **Month (1 - 12)**: Specifies the month when the task should run. A value of \\* indicates any month, while specific numbers represent particular months.\n    \n5.  **Day of Week (0 - 6)**: Specifies the day of the week when the task should run. The values 0 and 7 often represent Sunday, 1 represents Monday, and so on.\n    \n\nThe CRON syntax also supports special characters and shorthand notations:\n\n*   `*/x`: Represents every x interval. For example, \\*/15 in the minutes field means every 15 minutes.\n*   `x-y`: Represents a range of values. For example, 1-5 in the day of week field means Monday to Friday.\n*   `x,y,z`: Represents a list of values. For example, 1,15 in the day of month field means the 1st and 15th day.\n\n## Setting up the Scheduled Cron Trigger[](#setting-up-the-scheduled-cron-trigger)\n\nTo set up a Scheduled Cron Trigger within your BuildShip workflow, follow these steps:"
},
{
  "markdown": "## Scheduled Interval Trigger\n\nThe Scheduled Interval Trigger node is a versatile feature within BuildShip that **facilitates workflow automation at regular intervals**. With this trigger, you can **define specific time intervals and units**, allowing you to streamline tasks and processes based on your requirements.\n\n![Scheduled Interval Trigger](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Finterval-1.f72cf7cc.png&w=3840&q=75)\n\n## How to Use Scheduled Interval Trigger[](#how-to-use-scheduled-interval-trigger)\n\nConfiguring the Scheduled Interval Trigger involves the following fields:\n\n*   **Interval (Unit in digits)**: Set the **numeric value** that represents the interval at which your workflow should trigger.\n    \n*   **Time Unit**: Choose the appropriate **time unit** (e.g., seconds, minutes, hours) for your interval. This unit defines the **duration between successive triggers**.\n    \n\n## Setting up the Scheduled Interval Trigger[](#setting-up-the-scheduled-interval-trigger)\n\nTo set up a Scheduled Interval Trigger in your BuildShip workflow, follow these steps:"
},
{
  "markdown": "## Rowy Trigger\n\nRowy Triggers in BuildShip allow you to initiate a BuildShip workflow in response to specific events within your Rowy Project. This integration enables you to automate tasks seamlessly based on events that occur in your Rowy environment.\n\n![Rowy Trigger](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Frowy-trigger-1.a1026042.png&w=3840&q=75)\n\n## Pre-requisites ✅[](#pre-requisites-)\n\nFor this integration to work, you will need:\n\n*   A Rowy Project with a Rowy Run set up. If you don't have a Rowy Project, you can create one [here (opens in a new tab)](https://rowy.app/).\n\n## Configuration in BuildShip[](#configuration-in-buildship)\n\nThis is all you need to do in BuildShip to set up the Rowy Trigger. Now, let's set up the BuildShip Extension our Rowy Table.\n\n## Setting up the Rowy Extension[](#setting-up-the-rowy-extension)\n\nNow, whenever the selected event (Create, Update, or Delete) occurs in your Rowy Table, it will trigger the BuildShip workflow linked to this extension."
},
{
  "markdown": "## Telegram Bot Trigger\n\nThe Telegram Bot is a handy trigger within BuildShip that enables you to handle incoming messages in Telegram chat or Telegram group with a visual workflow builder.\n\nThis trigger allows you to easily manage Telegram groups, moderate and respond with meaningful messages and even include OpenAI in your workflow to generate meaningful responses to assist users in your group.\n\n![Telegram Bot Trigger](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ftelegram-bot.27f168f3.png&w=3840&q=75)\n\n## Pre-requisites ✅[](#pre-requisites-)\n\n1.  **Telegram bot API key** - The API keys of the Telegram bot that will be responding to the incoming messages. To setup a bot and get the API key, follow the instructions [here](https://docs.buildship.com/trigger-nodes/telegram-bot#how-to-create-a-telegram-bot-workflow).\n2.  **Telegram group Chat ID** - This is the group on which your Telegram bot will operate and listen to messages and send responses to. To learn how setup a group and get chat id, go [here](https://docs.buildship.com/trigger-nodes/telegram-bot#how-to-setup-a-telegram-group-and-get-chat-id).\n\n## Step to create a Telegram Bot workflow[](#step-to-create-a-telegram-bot-workflow)\n\n## How to setup a Telegram bot and get API key[](#how-to-setup-a-telegram-bot-and-get-api-key)\n\n1.  Enter **@BotFather** in the search tab and select the verified bot with tick mark that shows up.\n    \n    ![Telegram Bot](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fstep1.25d2c16c.png&w=640&q=75)\n    \n2.  Click Start to activate the BotFather bot. You will receive a list of commands to manage the bots.\n3.  Choose or type the **/newbot** command and click Send.\n4.  Choose a name for your bot. Your subscribers will see it in their conversations. Next, choose a username for your bot. The bot can be found by its username in the search bar. The username must be unique and end with the word “bot.”\n5.  Once you've made your selection for your bot's name, your bot will be brought to life. Shortly thereafter, you'll receive a message containing a link leading to your bot, which can be accessed at **\"t.me/\\[bot\\_username\\]** as well as your API key.\n6.  Make note of this API key as this is what you will need to use in the Telegram Trigger node on BuildShip.\n    \n    ![Telegram Bot](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fstep2.fae95fc8.png&w=3840&q=75)\n    \n\n## How to setup a Telegram group and get chat id[](#how-to-setup-a-telegram-group-and-get-chat-id)\n\n1.  Create a group on Telegram\n2.  Invite the bot you created in the previous steps\n3.  Also search and invite \"RawDataBot\" to your group.\n    \n    ![Telegram Bot](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fstep4.f9bcc6b0.png&w=640&q=75)\n    \n4.  Once you invite this RawDataBot to your group, it will post a message with the Chat ID of this group. Make a note of it for use in the Step 2 of your Telegram workflow.\n    \n    ![Telegram Bot Trigger](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fstep5.26cade9b.png&w=1200&q=75)\n    \n\n  \n\n## Setup Telegram Bot for individual user[](#setup-telegram-bot-for-individual-user)\n\n1.  Search for \"@userdatailsbot\" on telegram to get your personl UID.\n2.  Add the UID generated by Userinfo | Get id bot in teh chat ID of the Send Telegram Messaging Node.\n3.  Search for your created Bot on Telegram and click start.\n4.  Start chatting with your Bot. ![Telegram Bot user details bot](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ftelegram-individual-bot.3643fdf5.png&w=1200&q=75)"
},
{
  "markdown": "## Branch (If Else)\n\nThe **Branch node** is a conditional node in your workflow, designed to **execute different sets of actions based on a specific condition**. This node provides a powerful way to control the flow of your workflow, making it flexible and dynamic.\n\n![Branch](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fbranch1.e345255d.png&w=3840&q=75)\n\n## Using the Branch node[](#using-the-branch-node)\n\nThe Branch node **evaluates a base condition**. If the condition evaluates to \"**true**\", the node executes the actions in the \"**Then**\" block. If the condition evaluates to \"**false**\", it proceeds to execute the actions in the \"**Else**\" block.\n\n## Supported Comparison Operators[](#supported-comparison-operators)\n\nTo define your conditions, the \"Branch\" node supports the following comparison operators:\n\n*   `==`: Checks whether two values are equal\n*   `!=`: Checks whether two values are not equal.\n*   `>`: Checks whether the first value is greater than the second value.\n*   `<`: Checks whether the first value is less than the second value.\n*   `>=`: Checks whether the first value is greater than or equal to the second value.\n*   `<=`: Checks whether the first value is less than or equal to the second value.\n\nWith these operators, you can construct various conditions to control the flow of your workflow based on specific data or inputs.\n\n## Example: Conditional Response Based on Request Body[](#example-conditional-response-based-on-request-body)\n\nIn this example, we'll create a workflow that receives an HTTP request with a JSON body. The workflow will check the value of the `number` key in the request body. If the value is greater than 10, the workflow will return a message saying that the number is greater than 10. If the value is less than or equal to 10, the workflow will return a message saying that the number is less than or equal to 10.\n\n![Branch](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fbranch2.496911e1.png&w=3840&q=75)\n\n### Execution of the Example[](#execution-of-the-example)\n\n*   If the incoming requests' `number` key has a value greater than 10 (e.g., `\"number\": 15`), the workflow returns `15 is greater than 10`.\n    \n*   If the incoming requests' `number` key has a value less than or equal to 10 (e.g., `\"number\": 5`), the workflow returns `5 is less than or equal to 10`.\n    \n\n## Nested Branch (Nested If Else)[](#nested-branch-nested-if-else)\n\nA **Nested Branch** or a **Nested If Else** is a conditional structure within another conditional structure. Using nested branches allows you to create more complex conditional logic in your workflow by combining multiple levels of \"if-else\" statements. This approach is useful when you need to evaluate multiple conditions sequentially, with each condition leading to a different set of actions.\n\n### Nested Branch Example[](#nested-branch-example)\n\nLet's consider a scenario where we want to categorize incoming numbers into three groups: \"Greater than 20,\" \"Between 10 and 20,\" and \"Less than or equal to 10.\"\n\n![Branch](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fbranch3.d767d84d.png&w=3840&q=75)"
},
{
  "markdown": "## Loop\n\nThe Loop node is a versatile tool in BuildShip that empowers you to **iterate over elements** within a JSON object, an array, or even a literal value. This node serves as a **powerful mechanism for processing and manipulating data iteratively**. It is particularly useful when you want to perform a series of actions on each element of the input provided.\n\n![Loop node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Floop-1.2a6ff1e1.png&w=3840&q=75)\n\n## Looping Functionality[](#looping-functionality)\n\nThe primary functionality of the Loop node is to **traverse through all the elements** present in the input data and perform specified actions on each element. It facilitates the **execution of a set of nodes within the loop**, allowing you to interact with and modify the data at each iteration.\n\nThe loop processes each element sequentially. This mode is beneficial when the execution order matters, and actions must be taken step by step. For instance, performing data transformation on each element one after the other.\n\n## Using the Loop Node[](#using-the-loop-node)\n\nThe Loop node's functionality revolves around iterating over the elements of the input data and executing a set of actions for each element. Here's how you can use the Loop node:\n\n*   **Input Configuration**: The Loop node accepts three types of input: **JSON objects**, **arrays**, or **literals**. You can provide the input directly in the editor.\n    \n*   **Concurrency**: The Loop node offers the flexibility to set the number of concurrent executions to run. This allows you to control how many iterations are processed simultaneously, enhancing the efficiency of your workflow. (Note: To modify this option, please check the [pricing page (opens in a new tab)](https://buildship.com/pricing) to see the maximum concurrency limit for your plan.)\n    \n*   **Node Actions**: The Loop node **encapsulates a series of nodes** within it. This allows you to define the actions you want to perform on each element. You can add nodes for logging, making API calls, calculations, or any other desired functionality.\n    \n\n## Video[](#video)"
},
{
  "markdown": "## Parallel\n\nThe Parallel node allows you to run other nodes at the same time. This node is useful if you want to independent pieces of logic to run at the same time, saving valueable time in your workflow.\n\n![Parallel node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fparallel.db706e16.png&w=3840&q=75)\n\nIn parallel mode, each element of the input is processed concurrently. This is suitable when each iteration is independent and can be executed simultaneously. For example, making API calls to multiple endpoints.\n\nParallel processing executes actions simultaneously for each element, while series processing executes actions one after another.\n\n## Video[](#video)"
},
{
  "markdown": "## Repeat\n\nRepeat node is similar to loop node however you can repeat/loop over other nodes x number of times. You can mention how many times you want to repeat a task and add all the logic nodes inside the repeat node.\n\n![Repeat node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Frepeat.cdfe8551.png&w=3840&q=75)\n\n## Video[](#video)"
},
{
  "markdown": "## Return Node\n\nThe Return Node is used to **return values from the workflow**. It is the last node in the workflow and is always required. The Return Node is a crucial component in our workflow logic, designed to handle HTTP response codes and return a value upon execution.\n\nThe Return Node is a **non-configurable** node that takes in predefined HTTP status codes and produces a corresponding value as output.\n\n![return1](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Freturn1.c3dacd0d.png&w=3840&q=75)\n\n## Supported Status Codes[](#supported-status-codes)\n\nThe Return Node supports the following HTTP status codes:\n\n*   `200`: **OK**\n*   `201`: **Created**\n*   `202`: **Accepted**\n*   `204`: **No Content**\n*   `400`: **Bad Request**\n*   `401`: **Unauthorized**\n*   `403`: **Forbidden**\n*   `404`: **Not Found**\n*   `500`: **Internal Server Error**\n\n## Return Value[](#return-value)\n\nThe Return Nodes in the workflow allow users to generate specific output values based on various sources, providing flexibility and customization to the workflow logic. The Return Node can be used to return a value from the following sources:\n\n### Autofill Values using AI[](#autofill-values-using-ai)\n\nThe Return Nodes can leverage the power of AI to autofill values automatically. By using AI-driven autofill feature, users can save time and ensure that the generated values align with the workflow's objectives.\n\n### Values via Expressions[](#values-via-expressions)\n\nReturn Nodes support expressions, allowing users to create dynamic output values by combining variables, constants, and functions. Expressions enable users to manipulate data and perform calculations, making it possible to generate responses that adapt to changing conditions during workflow execution.\n\n### Request Components[](#request-components)\n\nIn workflows **involving REST API triggers**, Return Nodes can return values derived from different components of the request. Users can extract data from the request's headers, parameters, and body to generate meaningful responses.\n\n**For Example:** The Return Node can extract the user's name from the request header and use it to personalize the output message.\n\n### Returning Output Values from Previous Nodes[](#returning-output-values-from-previous-nodes)\n\nThe power of workflows lies in their ability to connect and pass data between nodes. Return Nodes can utilize output values from previous nodes in the workflow. By referencing the outputs of other nodes, users can build complex logic and create cascading effects.\n\n**For Example:** If a previous node performs a calculation or retrieves data from a database, the Return Node can use that data to provide the final result of the workflow.\n\n## Video[](#video)"
},
{
  "markdown": "## Pinecone Integration\n\nThis integration allows you to connect and interact with your Pinecone vector database and perform quick operations such as \"Delete Vectors\", \"Upsert Pinecone Index\", \"Query Vectors\".\n\n  \n![PineCone Nodes](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpinecone_banner.cffe705f.png&w=1920&q=75)\n\n## Steps to connect with Pinecone Database[](#steps-to-connect-with-pinecone-database)\n\n### Example: Lets upsert some records to Pinecone vector database[](#example-lets-upsert-some-records-to-pinecone-vector-database)\n\nIn this example we will upsert few values of records to the created Pinecone vector index.\n\n  \n![PineCone Upsert Node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpinecone-node.9b3aff5f.png&w=1920&q=75)\n\n*   Add a REST API Trigger and select POST method.\n*   Add all the required values from the Vector Index we created above.\n*   Pass the API Key.\n*   Sample Array for record:\n\n*   Lets deploy our workflow and test the API on Postman (choose your favorite tool)\n\n![PineCone Node Testing](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpinecone_postman.762d0c1c.png&w=1920&q=75)\n\n🎉 Congratulations you have successfully connected and upserted a record in Pinecone Database\n\n![PineCone Upsert Value](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpinecone-upsert.c2f760da.png&w=1920&q=75)"
},
{
  "markdown": "## Testing\n\nThe Testing feature in BuildShip's Node Editor empowers users to **rigorously test their node logic without the need to deploy the entire workflow**. This functionality offers a **dedicated space** to validate your node's behavior, ensuring that it handles various scenarios, including edge cases, effectively.\n\n## Testing Individual Nodes[](#testing-individual-nodes)\n\nDuring the development of your workflows, you have the **ability to test individual nodes right from the Node Editor**. This streamlined approach allows you to validate the functionality of your nodes without the necessity of deploying the entire workflow.\n\nHere's how you can test individual nodes:\n\n## Testing Entire Workflows[](#testing-entire-workflows)\n\nBeyond testing individual nodes, BuildShip enables you to **validate the functionality of your entire workflow**, including triggers and logic nodes, before deploying it.\n\n![Node Testing](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fnode-testing-3.55aad7fc.png&w=3840&q=75)\n\nFollow the steps below to test your workflow:\n\nWith BuildShip's testing capabilities, you can iterate through your workflow design, ensuring its effectiveness and identifying any flaws or bugs before deploying it to your production environment."
},
{
  "markdown": "Ensuring the security of your applications and workflows is paramount. Hardcoding sensitive information like secret keys directly into your code can lead to **potential vulnerabilities and increased costs due to unauthorized access**. BuildShip addresses this concern by providing **an effective way to safeguard your secret keys** using Google Cloud Platform (GCP) Secret Manager under the hood.\n\n## Leveraging BuildShip Secret Manager[](#leveraging-buildship-secret-manager)\n\nBuildShip introduces a robust solution to manage your secret keys securely using GCP Secret Manager. This ensures that your keys remain confidential and are only accessed when needed.\n\nHere's how to use the Secret Keys with BuildShip:\n\nAnd that's it! 🚀 By following these steps, you can seamlessly integrate secret keys into your workflows while ensuring their confidentiality and security through BuildShip's Secret Manager integration."
},
{
  "markdown": "## Support Messages\n\nIf you ever get stuck or need help with anything BuildShip, you can reach out to us using Support Messages.\n\nTo submit a support message, click on the 'Support' button in the bottom-left corner of the screen. This will open up a form where you can submit your message (including screenshots and video links if you wish to include any).\n\n![Support Message Form](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fsupport-message-form.c924a94e.png&w=3840&q=75)\n\n## Including a copy of the workflow[](#including-a-copy-of-the-workflow)\n\nIf you're having trouble with a specific workflow, you can include a copy of it in your support message (using the checkbox at the bottom of the form) for us to take a look. For the checkbox to appear, you must have the workflow open in the editor before opening the support form.\n\n### Marking inputs as sensitive[](#marking-inputs-as-sensitive)\n\nTo ensure no sensitive data (like an API key) is included in the workflow, any input fields marked 'Sensitive' will be redacted from the copy of the workflow that is sent to us. You can mark a field as sensitive by following these steps:"
},
{
  "markdown": "## Logging\n\nLogging plays a vital role in the development and maintenance of workflows. It allows you to **track and understand the flow** of your workflow, **monitor variable values**, and **identify potential issues**.\n\n![Logging](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Flogging1.3bd30627.png&w=3840&q=75)\n\nLogging statements serve as essential tools in your workflow development toolkit. They offer several advantages:\n\n*   **Debugging**: Logging helps you identify and resolve issues within your workflow's logic.\n*   **Monitoring**: By reviewing log messages, you can monitor the execution flow, identify bottlenecks, and improve efficiency.\n*   **Data Visualization**: Logging enables you to visualize data, making it easier to understand how data changes as the workflow progresses.\n\nYou can harness the power of logging in BuildShip through two primary methods:\n\n## Via Logging Core Node[](#via-logging-core-node)\n\nThe Logging Core Node provides a straightforward way to log messages and data directly to the BuildShip logging console. Here's how:\n\n![Logging Core Node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Flogging2.dd9cf569.png&w=3840&q=75)\n\n## Via Logging Statements in Node Logic[](#via-logging-statements-in-node-logic)\n\nAnother way to integrate logging in your workflow is by directly adding logging statements within the logic of individual nodes. This method gives you more control over when and what to log. Here's how:\n\n![Logging Statements](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Flogging3.0ced4a0a.png&w=3840&q=75)\n\n## Viewing the Cloud Logs[](#viewing-the-cloud-logs)\n\nAfter incorporating logging statements into your workflow, you can conveniently view these statements using the built-in logging panel in BuildShip.\n\n![Logging Panel](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Flogging-panel.55d11765.png&w=3840&q=75)\n\n*   The logging panel is **located at the bottom** of your BuildShip Workspace, initially minimized.\n*   Users can simply open or close the panel using the **expand button** on the right to **see old logs**, if any.\n*   To **enable live logs** while your workflow executes, toggle the \"**Live**\" switch on. This allows you to monitor logs as your workflow progresses via the trigger.\n*   To **view logs specific to a node** or the entire workflow, switch from the default Workflow view to the Node view. To view logs for a particular node, select the node from the Node View."
},
{
  "markdown": "## Workflow Operations\n\nExplore the fundamental BuildShip operations available for executing actions on nodes and workflows.\n\n*   **Copy**: Duplicates a node or workflow, creating an identical copy.\n*   **Paste**: Places a copied node or workflow at the desired location.\n*   **Delete**: Removes a selected node or workflow from the project.\n*   **Skip Node**: Bypasses the execution of a specific node within a workflow.\n*   **Add on Fail**: Defines actions or nodes to execute in the event of a workflow failure using methods and conditions.\n*   **Rename a workflow**: Modifies the workflow name of your choice.\n*   **Export API**: Exports an Open API schema of your workflow to an external file (JSON/YAML) for sharing or backup.\n*   **Import Open API**: Uploads the exported Open API spec to the workflow."
},
{
  "markdown": "BuildShip provides pre-defined nodes for Firestore integration, making it easy to interact with Firebase services within your workflows.\n\nBuildShip offers two options for interacting with Firebase:\n\n1.  Using BuildShip's built-in Firestore database\n2.  Connecting to your own Firebase project\n\n## Option 1: Using BuildShip's Built-in Firestore Database[](#option-1-using-buildships-built-in-firestore-database)\n\nBuildShip comes equipped with a built-in Firestore database that is automatically associated with your BuildShip project.\n\n![BuildShip Firebase](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fbuildship-firebase-1.462fd590.png&w=3840&q=75)\n\n*   **No Additional Setup:** Everything is pre-configured and ready for immediate use.\n*   **Easy Access:** Users can directly access and interact with the Firestore database through BuildShip.\n*   **Full Functionality:** You can perform all CRUD (Create, Read, Update, Delete) operations and more, making it a comprehensive solution for your Firebase integration needs.\n\n### Using BuildShip Database nodes[](#using-buildship-database-nodes)\n\nIn the Node Explorer, navigate to the \"**BuildShip Database**\" category. You'll find a range of nodes for various Firestore operations. Insert the relevant Firestore integration nodes into your workflow. Customize the nodes by providing the necessary input parameters for your specific use case.\n\n> You do not need to provide any additional information, like the `Project ID` parameter to use the BuildShip Database nodes. You can directly use the nodes to interact with your Firestore database.\n\n## Option 2: Connecting to Your Own Firebase Project[](#option-2-connecting-to-your-own-firebase-project)\n\nUsers can connect their Firebase projects by **providing the Project ID** and **setting up permissions for the BuildShip Runtime Service Account**.\n\nSteps to set up your own Firebase Connection:\n\n## Purpose and Corresponding Nodes[](#purpose-and-corresponding-nodes)\n\nHere's a comparison table highlighting the purpose of Firestore operations and the corresponding nodes for both BuildShip's Firestore Database and your own Firestore Database:"
},
{
  "markdown": "Cloud Firestore does not natively support indexing or searching text fields in documents. To enable full-text search functionality in your Firebase project, we recommend integrating with a third-party search integrations like [Algolia (opens in a new tab)](https://www.algolia.com/), [Elastic (opens in a new tab)](https://www.elastic.co/app-search/), or [Typesense (opens in a new tab)](https://typesense.org/), which provide powerful and efficient search capabilities.\n\nThe integration involves two main steps:\n\n1.  **Installing the Firebase Extension**\n\nChoose a third-party search service that suits your requirements, such as **Algolia**, **Elastic**, or **Typesense**. Each service may have its own extension for Firebase.\n\nThese Firebase extensions help in indexing your data and syncing it with the third-party search service everytime a CRUD operation is performed on your Firebase data. This helps reduce the cost of indexing and syncing your data.\n\n2.  **Node for Performing a Full-Text Search on the Search Index**\n\nThis node allows you to execute full-text search queries on the data stored in the respective search index.\n\n## Implementing Full Text Search[](#implementing-full-text-search)\n\nLet's take a look at how to implement full-text search on your Firebase data. For this example we'll be using Algolia.\n\nThis is how you can perform a full-text search on your Firebase data using Algolia. You can use the same steps to perform a full-text search on your Firebase data using **Elastic** or **Typesense**.\n\nYou can find the Full Text Search Nodes for each of these integrations under their respective categories in the Node Explorer."
},
{
  "markdown": "BuildShip simplifies the process of storing files and performing operations on them by offering **pre-built Storage nodes** designed to work seamlessly with GCP Cloud Storage.\n\nWith these nodes, you can effortlessly manage your files, including tasks such as uploading, creating, deleting, moving, and renaming files and folders within your GCP Bucket.\n\n![GCP Storage](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fgcp-storage.9d2d6bb5.png&w=3840&q=75)\n\nThe integration of BuildShip and GCP Cloud Storage is particularly valuable for users who need a reliable and scalable file storage solution. Whether you're generating AI images or handling other data, BuildShip's pre-built nodes ensure that your files are stored securely and are readily accessible for further processing and sharing.\n\n## Use Cases[](#use-cases)\n\nGCP Cloud Storage in BuildShip caters to a diverse range of day-to-day use cases.\n\nConsider a scenario where you've employed a popular AI Image Generation model like \"Replicate: Stability AI Image Generation.\" Models like these often generate images with short-lived links, making it imperative to store these images before sharing them.\n\n![GCP Storage](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fgcp-storage-1.ee1b94d9.png&w=3840&q=75)\n\nIn such cases, the storage nodes in BuildShip offer a solution. By providing the external URL, these nodes save your images to your GCP bucket and generate permanent public URLs for easy and secure access by anyone.\n\nThe use cases extend beyond image generation to encompass any situation where secure and efficient file storage is required. Whether you're managing data for machine learning models, archiving documents, or sharing resources with your team, BuildShip's integration with GCP Cloud Storage streamlines the process.\n\n## Options for Storing your Files[](#options-for-storing-your-files)\n\nBuildShip provides flexible options for storing files and images to suit your specific needs:\n\n### Use BuildShip's GCP Project[](#use-buildships-gcp-project)\n\nBuildShip's GCP Project is a convenient option for users who want to get started quickly. This option is ideal for users who don't have a GCP account or don't want to create one.\n\n![GCP Storage](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fgcp-storage-2.5dc8a48a.png&w=3840&q=75)\n\n*   **No Extra Setup Required:** Begin using BuildShip's pre-built Storage nodes under the \"BuildShip File Storage\" category without the need for additional configuration.\n*   **Utilize the Underlying GCP Project:** Enjoy the benefits of GCP's robust infrastructure without the hassle of setting it up yourself.\n*   **Generous Storage Options:** BuildShip offers generous storage options that can be upgraded as your needs grow. For pricing details, visit [BuildShip Pricing (opens in a new tab)](https://buildship.com/pricing).\n*   **Access Storage using BuildShip's Built-in Storage UI:** Easily manage and access your stored files within the BuildShip environment, thanks to its user-friendly Storage UI.\n\n### Connect to your own GCP Project[](#connect-to-your-own-gcp-project)\n\nBuildShip also provides the option to connect to your own GCP Project. This option is ideal for users who already have a GCP account and want to manage their GCP resources independently.\n\n![GCP Storage](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fgcp-storage-3.445c7705.png&w=3840&q=75)\n\n*   **Manage Your Own Buckets:** If you prefer to manage your GCP Buckets independently, BuildShip provides the flexibility to connect to your existing GCP Project.\n*   **Access to GCP:** You'll have full access to GCP's powerful features, allowing you to configure and manage your storage resources according to your specific requirements.\n\n## Connecting to Your Own GCP Project[](#connecting-to-your-own-gcp-project)\n\nTo integrate your own Google Cloud Platform (GCP) Project with BuildShip, follow these steps:"
},
{
  "markdown": "## Postgres Integration with BuildShip\n\nBuildShip offers a seamless integration with PostgreSQL using BuildShip's pre-built Postgres Integration nodes, enabling you to perform Create, Read, Update, and Delete (CRUD) operations on your database effortlessly.\n\n![Postgres Integration](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostgres-1.7446931f.png&w=3840&q=75)\n\nYou can find the Postgres Integration nodes under the **Integrations** section of the node explorer.\n\n## Prerequisites ✅[](#prerequisites-)\n\nBefore you get started with integrating PostgreSQL into BuildShip, ensure you have the following:\n\n### PostgreSQL Database[](#postgresql-database)\n\nYou should have access to a PostgreSQL database. If you don't have one, you can set it up easily. You can host your PostgreSQL database using various providers and methods, including:\n\n*   **Self-Hosted**: You may have a self-hosted PostgreSQL database on your own server or infrastructure.\n*   **Cloud-Based**: PostgreSQL can be hosted on cloud platforms like AWS RDS, Google Cloud SQL, or Azure Database for PostgreSQL.\n*   **Serverless**: Consider using a serverless PostgreSQL service like [NEON (opens in a new tab)](https://www.neon.tech/) (which is used in this tutorial as an example) for a hassle-free and scalable database setup.\n\n![Postgres Integration](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostgres-2.0bca7eb4.png&w=3840&q=75)\n\n### Connection String Parameters[](#connection-string-parameters)\n\nRetrieve the connection string parameters for your PostgreSQL database. You'll need the following:\n\n*   **Host**: The host of your PostgreSQL database.\n*   **Database Name**: The name of your PostgreSQL database.\n*   **User**: The username to access your PostgreSQL database.\n*   **Password**: The password associated with the user.\n\n![Postgres Integration](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostgres-3.80c44ff3.png&w=3840&q=75)\n\nLet's walk through with an example of how you can use these nodes to perform CRUD operations on your PostgreSQL database. In this example, we'll be using a PostgreSQL database hosted on [NEON (opens in a new tab)](https://www.neon.tech/). On BuildShip, we can begin with a new workflow with any Trigger of your preference. In this example, we'll be using a [REST API Trigger](https://docs.buildship.com/rest-api).\n\n## Fetching Table Schema[](#fetching-table-schema)\n\n![Postgres Integration](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostgres-schema.5441d44a.png&w=3840&q=75)\n\nTo fetch the schema of a table in your PostgreSQL database, you can use the **Fetch Postgres Table Schema** node. Open the Node Explorer, under the **Integrations** section, select the **Postgres** category, and select the **Fetch Postgres Table Schema** node to be added to the workflow.\n\nAdd in your PostgreSQL **database's connection string parameters** and the **table name** as input. You can also open the Node Editor (by clicking on the `</>` icon) to test and modify the existing node.\n\n**Sample Output:**\n\n![Postgres Integration](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostgres-4.e7273876.png&w=3840&q=75)\n\n## Fetching Table Data[](#fetching-table-data)\n\n![Postgres Integration](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostgres-fetch.a282431b.png&w=3840&q=75)\n\nTo fetch the data of a table in your PostgreSQL database, you can use the **Fetch Postgres Table Data** node from the Node Explorer. You can also use a parameterized query to fetch data based on a condition. The **Condition Column** and **Condition Value** inputs are optional. If you don't provide these inputs, the node will fetch all the data from the table.\n\nAdd in your PostgreSQL **database's connection string parameters** and the **table name** as input. Test and modify the node via the Node Editor (by clicking on the `</>` icon).\n\nLet's say we need to fetch the data for the `breed_name` `Doberman Pinscher` from the `dog_breeds` table. We'll add the `conditionColumn` as `breed_name` and `conditionValue` as `Doberman Pinscher`.\n\n**Example Output:**\n\n![Postgres Integration](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostgres-5.95363874.png&w=3840&q=75)\n\n## Inserting Data[](#inserting-data)\n\n![Postgres Integration](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostgres-insert.5d3578e8.png&w=3840&q=75)\n\nTo insert data into a table in your PostgreSQL database, you can use the **Insert Data into Postgres DB** node from the Node Explorer.\n\nLet's say we need to insert a new row into the `dog_breeds` table with the following data:\n\nAdd in your PostgreSQL **database's connection string parameters** and the **table name** as input. Test and modify the node via the Node Editor (by clicking on the `</>` icon).\n\nOutput:\n\n![Postgres Integration](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostgres-6.5aacc5ad.png&w=3840&q=75)\n\n## Updating Data[](#updating-data)\n\n![Postgres Integration](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostgres-update.c6870cb6.png&w=3840&q=75)\n\nTo update data in a table in your PostgreSQL database, you can use the **Update Postgres Row Data** node from the Node Explorer.\n\nLet's say we need to update the `average_weight` of the `Doberman Pinscher` breed to `80` in the `dog_breeds` table.\n\nAdd in your PostgreSQL **database's connection string parameters** and the **table name** as input. The **Column ID** and **Column Value** let's you filter the row to be updated.\n\nLet's add the `columnId` as `breed_name` and `columnValue` as `Doberman Pinscher`. For the data to be updated, we'll add the following JSON in the **Data** input:\n\n**Output:**\n\n![Postgres Integration](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostgres-7.5616d3bc.png&w=3840&q=75) ![Postgres Integration](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostgres-8.21f0e29c.png&w=3840&q=75)\n\n## Deleting Data[](#deleting-data)\n\n![Postgres Integration](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostgres-delete.bc73779d.png&w=3840&q=75)\n\nTo delete data from a table in your PostgreSQL database, you can use the **Delete Row from Postgres** node from the Node Explorer.\n\nLet's say we need to delete the dog breed which is originated from `Tibet` from the `dog_breeds` table.\n\nAdd in your PostgreSQL **database's connection string parameters** and the **table name** as input. The **Column ID** and **Column Value** let's you filter the row to be deleted.\n\nAdd the `columnId` as `origin` and `columnValue` as `Tibet`.\n\n**Output:**\n\n![Postgres Integration](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostgres-9.d3bb5916.png&w=3840&q=75) ![Postgres Integration](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fpostgres-10.6e21474d.png&w=3840&q=75)\n\n> You can also create your own Postgres Integration nodes using the versatile **Script Node** available in the **Core Nodes** section of the Node Exporer or, [generate it via AI](https://docs.buildship.com/ai-nodes).\n\n> If you have any special node requests for us, do let us know via the **Support Section** on the BuildShip app or, [drop us an email](mailto:support@buildship.com) with your use case. 🙌"
},
{
  "markdown": "BuildShip offers a powerful integration with Supabase allowing you to perform Create, Read, Update, and Delete (CRUD) operations on your data with ease. This integration is achieved through the Supabase Realtime API.\n\n![Supabase Integration](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fsupabase1.1a126d81.png&w=3840&q=75)\n\n## Prerequisites ✅[](#prerequisites-)\n\n### Your Supabase Table[](#your-supabase-table)\n\nA Supabase Table you want to integrate with BuildShip. If you don't have a Supabase project, you can create one at [supabase.io (opens in a new tab)](https://supabase.io/).\n\n### API Key and URL[](#api-key-and-url)\n\n![Supabase API Key and URL](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fsupabase2.f09d38dc.png&w=3840&q=75) ![Supabase API Key and URL](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fsupabase3.311feceb.png&w=3840&q=75)\n\nBefore you begin, make sure you have your Supabase API key and Table URL ready. You can obtain these keys from your Supabase project dashboard settings:\n\n*   Log in to your Supabase account.\n*   Navigate to your project's dashboard.\n*   In the dashboard settings, find and copy your API key and Table URL. These keys will be used to connect BuildShip with your Supabase project.\n\n### API Endpoints (Optional - For creating your own custom nodes)[](#api-endpoints-optional---for-creating-your-own-custom-nodes)\n\nYou can get access to API endpoints directly from your table by clicking on the \"API\" button located at the top right corner of the table view. This is useful if you wish to create your own custom nodes for specific endpoints.\n\n## Creating Data[](#creating-data)\n\n![Supabase Create Node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fsupabase-c.61d7bf50.png&w=3840&q=75)\n\nWith BuildShip's integration, you can easily create new records in your Supabase PostgreSQL database. Follow these steps:\n\n*   In your BuildShip Workflow, add a Supabase Create Node from the Node Explorer. You can find the Supabase Create Node under the \"Supabase\" integration category or you could simply enter `Supabase` on the search bar.\n*   Configure the node by providing your Supabase API Key, Bearer Token, Table URL, and Table Name.\n*   Open the Node Editor to test your node.\n*   Add the data you want to create in the \"Data\" field in the form of a JSON object. Here's an example of a JSON object you can use to create a new record in your Supabase table:\n\n*   Test your node by clicking on the \"Test\" button. If the node is configured correctly, you should see a new record in your Supabase table.\n*   Optionally, you could modify and customize the node according to your needs. Once you're done, click on the \"Save\" button to save your node.\n*   Add more nodes or simply add a Return node to complete your workflow.\n\n## Reading Data[](#reading-data)\n\n![Supabase Read Node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fsupabase-r.5a90abb9.png&w=3840&q=75)\n\nTo retrieve data from your Supabase database, use the Read Node:\n\n*   In your BuildShip workflow, add a Supabase Read Node from the Node Explorer. You can find the Supabase Create Node under the \"Supabase\" integration category or you could simply enter `Supabase` on the search bar.\n*   Configure the node by providing your Supabase API Key, Bearer Token, Table URL, and Table Name.\n*   Specify the columns you want to retrieve from your table in the \"Columns\" field. You can also leave it empty which will by default retrieve all columns.\n*   Optionally you could customize, test and save the node.\n*   Execute the workflow, and BuildShip will fetch the data from your Supabase database in real-time.\n*   Now you can use this data anywhere in your workflow via the Expressions menu.\n\n## Updating Data[](#updating-data)\n\n![Supabase Update Node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fsupabase-u.1b0d9c72.png&w=3840&q=75)\n\nUpdating records in your Supabase database is straightforward with the Update Node:\n\n*   In your BuildShip workflow, add a Supabase Update Node from the Node Explorer.\n*   Configure the node by providing your Supabase API Key, Bearer Token, Table URL, and Table Name.\n*   You need to add conditions to specify which records should be updated using filters like `eq`, `lt`, and `is`.\n\n*   You can optionally customize, test and save the node.\n*   Deploy your workflow, and everytime your workflow triggers, your data will be updated in your Supabase database in real-time.\n\n## Deleting Data[](#deleting-data)\n\n![Supabase Delete Node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fsupabase-d.b55f7702.png&w=3840&q=75)\n\nTo delete records from your Supabase database, use the Delete Node:\n\n*   In your BuildShip workflow, add a Supabase Delete Node from the Node Explorer.\n*   Configure the node by providing your Supabase API Key, Bearer Token, Table URL, and Table Name.\n*   Add filters to specify which records should be deleted using filters like `eq`, `lt`, and `is`.\n*   Deploy your workflow and the specified records will be deleted from your Supabase database in real-time.\n\n## Filters[](#filters)\n\nFilters are used to specify which records should be retrieved, updated, or deleted. You can add multiple filters to a node. Here's a list of all the filters you can use:\n\n*   `eq` (Equal): This operator is used to filter records where a specific field is equal to a given value. For example, `name=eq.siamese` would match records where the name field is equal to \"siamese.\" neq (Not Equal): This operator filters records where a specific field is not equal to a given value. For example, `age=neq.5` would match records where the age field is not equal to 5.\n    \n*   `gt` (Greater Than): Use this operator to filter records where a specific field is greater than a given value. For instance, `age=gt.30` would match records where the age field is greater than 30.\n    \n*   `lt` (Less Than): This operator filters records where a specific field is less than a given value. For example, `price=lt.10` would match records where the price field is less than 10.\n    \n*   `gte` (Greater Than or Equal To): This operator filters records where a specific field is greater than or equal to a given value. For example, `quantity=gte.100` would match records where the quantity field is greater than or equal to 100.\n    \n*   `lte` (Less Than or Equal To): Use this operator to filter records where a specific field is less than or equal to a given value. For instance, `rating=lte.4.5` would match records where the rating field is less than or equal to 4.5.\n    \n*   `is` (IS): This operator is used for comparing fields with specific values or conditions, such as checking if a field is null. For example, `email=is.null` would match records where the email field is null.\n    \n*   `like` (LIKE): This operator allows you to perform partial string matching. For example, `name=like.%John%` would match records where the name field contains \"John\" anywhere in the string."
},
{
  "markdown": "This tutorial demonstates how you can implement **\"Bring Your Own Key\" (BYOK)** feature in BuildShip. BYOK allows individual users or businesses to let their end-users integrate their own API keys within workflows.\n\nThis ensures greater flexibility and cost management, particularly in scenarios where multiple users or clients require separate API access.\n\n![BYOK](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fbyok-og.8ce1e811.png&w=3840&q=75)\n\nLet's dig deeper into how you can implement BYOK in your BuildShip workflows.\n\n## Prerequisites ✅[](#prerequisites-)\n\n*   A system within your front-end application where users can input and securely store their respective API keys.\n\n## Accessing BYOK keys[](#accessing-byok-keys)\n\n## BYOK Example Workflow[](#byok-example-workflow)\n\nLet's take a look at how you can implement BYOK in your BuildShip workflow using the OpenAI Text Generator model within BuildShip:\n\n![BYOK](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fbyok1.51f07fa8.png&w=3840&q=75)\n\nThis workflow showcases the use of the OpenAI Text Generator node, ensuring that each user can utilize their individual API keys and prompts received from request parameters."
},
{
  "markdown": "## API/HTTP Call Node\n\nThe API Call is a powerful utility node to HTTP requests to external APIs for data retrieval, submission, or triggering actions.\n\n![API Call Node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fapi-call.8fac2647.png&w=3840&q=75)\n\n## Steps to use API Call Node[](#steps-to-use-api-call-node)\n\n### Logging During Node Execution[](#logging-during-node-execution)\n\nIf you need to log specific information during the execution of the 'API Call' node, you can include a logging statement in the code. This can be helpful for debugging and monitoring the behavior of your workflow.\n\n![Logging](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fapi-call-logging.74fa6184.png&w=1920&q=75)\n\n## Video[](#video)\n\nThat's it! You've successfully configured and tested an API call using the 'API Call' node in our platform. If you encounter any issues or have questions, feel free to reach out to our support team for assistance."
},
{
  "markdown": "## AI Generated Nodes\n\nThere are two ways to build custom nodes in BuildShip:\n\n*   Picking pre-built nodes via the Nodeverse\n*   Building custom nodes via AI\n\n## Building Custom Node via AI[](#building-custom-node-via-ai)\n\nIn BuildShip, you have the flexibility to create custom nodes for your specific use cases using an integrated AI-powered node building feature. This process allows you to streamline the node creation process through intelligent prompts. Let's explore how to build custom nodes using this AI feature:\n\nBy following these steps, you can efficiently create custom nodes tailored to your specific automation requirements! 🚀\n\n## AI Autofill Input[](#ai-autofill-input)\n\nBuildShip offers an AI Autofill feature that allows users to automatically populate node inputs with static or dynamic data. Here's how you can effectively leverage AI Autofill to automate the node data:\n\nAll you need to do now is to check if the generated value matches your requirements. You can modify the prompt as many times as you like and request a different value to fit your use case."
},
{
  "markdown": "## Script Node\n\nA Script Node is a flexible building block in your workflow automation system. It provides a **blank canvas** for you to write your custom logic.\n\nUsers can **configure input parameters**, **specify the output format**, and **add metadata** to describe the node's purpose and appearance.\n\n![script node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fscript-1.03cdc1e8.png&w=3840&q=75)\n\n## Customzing the Script Node[](#customzing-the-script-node)\n\n### Node Logic[](#node-logic)\n\nThe core of a Script Node is its logic, where you define the custom behavior of the node. This logic is typically written in JavaScript/TypeScript.\n\n![script node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fscript-2.2f3a1add.png&w=3840&q=75)\n\nBelow is an example of a Script Logic for generating QR codes:\n\nIn the above example, we import the `toDataURL` function from the [qrcode NPM Library (opens in a new tab)](https://www.npmjs.com/package/qrcode) and create an asynchronous function `generateQRCode`. It takes an input parameter `url`, generates a QR code image, and returns its data URL.\n\n### Input Parameters[](#input-parameters)\n\nInput parameters are values that users can configure when using the Node. These parameters can be set in the form UI or via JSON schema.\n\n![script node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fscript-3.d3601243.png&w=3840&q=75)\n\nHere's the input configuration (in JSON) for the QR code generation node:\n\nHere,\n\n*   `type`: Specifies that the input is an object.\n*   `properties`: Defines the available input properties. In this case, we have a single property, \"url.\"\n*   `url`: Describes the \"url\" property. It has a title, description, and data type (string). The \"buildship\" section includes an index, which determines the order in which this input is displayed to users. The \"required\" field indicates that the \"url\" parameter is mandatory.\n\n### Output Format[](#output-format)\n\nYou can specify the output format of the node to inform users about what to expect from this node.\n\n![script node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fscript-4.400ed623.png&w=3840&q=75)\n\nFor the QR code generation node, the output format is as follows:\n\nHere,\n\n*   `description`: Provides a brief description of the output, which is the base64 data URL of the generated QR code image.\n*   `type`: Indicates that the output is of type \"string.\"\n\n### Node Metadata[](#node-metadata)\n\nNode metadata allows you to provide information about the node's appearance and purpose.\n\n![script node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fscript-5.4e2aacd5.png&w=3840&q=75)\n\nHere's an example of metadata for the QR code generation node:\n\nHere,\n\n*   `icon`: The node's icon, represented as an SVG path. It's defined in the SVG format.\n*   `name`: The name of the node, which is \"Generate QR Code\" in this case.\n*   `description`: A brief description of the node's purpose.\n*   `id`: A unique identifier for the node, which can be useful for the **Save to Library** feature coming soon! 🚀\n\nThis metadata helps users quickly identify the node and understand its purpose."
},
{
  "markdown": "## Utility Nodes\n\nUtility Nodes are a diverse collection of pre-built nodes created to **simplify a wide range of tasks** and utilities within your BuildShip workflows.\n\n![Utility Nodes](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Futility-1.13d6f28d.png&w=3840&q=75)\n\nThese nodes can be found in the **Node Explorer** under the **Utilities section**.\n\nUtility nodes can serve as **building blocks** for your workflows, allowing you to **automate tasks** whether you're dealing with data manipulation, web interactions, calculations, or other common tasks.\n\n## How to Use Utility Nodes[](#how-to-use-utility-nodes)\n\nTo use a Utility Node, simply go to the Node Explorer and **select any node from the utility section** into your workflow.\n\nUtility nodes are **pre-built** so, you **don't need to write any code**. Utility nodes are also **fully customizable**, so you can tailor them to your specific needs either via the AI node modifier or by writing your own logic.\n\n## Customization[](#customization)\n\nBuildShip empowers you to fully customize Utility Nodes to align them precisely with your unique workflow requirements. Here's how you can tailor these nodes:\n\n*   **Node Editor `(</>)`:** Enter the Node Editor to modify the Node Script using JavaScript (JS) or TypeScript (TS). Customize input and output parameters, as well as the node description to suit your specific use case.\n\n![Utility Nodes](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Futility-2.81ad144c.png&w=3840&q=75)\n\n*   **AI Node Modifier:** Customize nodes **effortlessly without coding**. Click the Magic Wand icon (🪄) to open an AI prompt modal. Type your instructions or modifications for the node, and the AI Node Modifier will automatically apply them.\n\n![Utility Nodes](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Futility-3.622111a6.png&w=3840&q=75)\n\nWith this level of customization, you can adapt Utility Nodes to perform exactly the utilities you need within your workflows, ensuring maximum efficiency.\n\n## Available Utility Nodes[](#available-utility-nodes)\n\nBuildShip offers a **growing library** of Utility Nodes to cater to your automation needs. Below are some examples of these nodes:\n\n*   **API Call:** Make HTTP requests to external APIs for data retrieval, submission, or triggering actions. Learn more in detail [here](https://docs.buildship.com/core-nodes/api-call-node)\n    \n*   **Calculator:** Perform mathematical calculations and operations on numeric values.\n    \n*   **Combine Vector Embeddings:** Merge vector embeddings or feature vectors for machine learning and data analysis.\n    \n*   **Form Value Extractor:** Extract values from structured data sources, such as web forms or JSON payloads.\n    \n*   **Generate PDF from HTML:** Convert HTML content into PDF documents for reporting and documentation.\n    \n*   **Generate QR Code:** Create QR codes containing information or data for various applications.\n    \n*   **Text to Lowercase:** Convert text or strings to lowercase for consistent text processing.\n    \n*   **Neighbor Search:** Perform searches based on proximity or similarity.\n    \n*   **PDF to Text:** Extract text content from PDF documents for further processing.\n    \n*   **Redirect Request:** Redirect HTTP requests to other URLs or endpoints.\n    \n*   **Scrape Web URL:** Extract data from web pages by scraping their content.\n    \n\nWe're continually expanding the range of Utility Nodes to meet evolving automation needs."
},
{
  "markdown": "## WhatsApp Integration\n\nThis integration provides the most straightforward and efficient means of utilizing the WhatsApp Business Platform Cloud API to interact with your users and customers. With BuildShip's WhatsApp Node, you can effortlessly construct an entire workflow that enables you to commence customer interactions within a matter of minutes, all without the burden of intricate backend configurations.\n\n![WhatsApp Send Node](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fwhatsapp-banner.a519fac1.png&w=3840&q=75)\n\n## Sending Free-Form Messages through WhatsApp Node[](#sending-free-form-messages-through-whatsapp-node)\n\nYou can use this BuildShip's WhatsApp integration node to send the following free-form messages types:\n\n*   Text messages\n*   Media messages\n\n### Requirements[](#requirements)\n\n*   Permanent user access token is required authorize the user for that app.\n*   WhatsApp Business Phone Number ID. (from which messages will be sent).\n*   Data (to be sent as object in JSON).\n\n### 📝 Steps to get required credentials and permissions from Meta - WhatsApp Business Account[](#-steps-to-get-required-credentials-and-permissions-from-meta---whatsapp-business-account)\n\nAlso, When sending a series of messages, the order in which messages are delivered is not guaranteed to match the order of your API requests. If you need to ensure the sequence of message delivery, confirm receipt of a delivered status in a messages webhook before sending the next message in your message sequence.\n\n### Time to Test and Ship WhatsApp Node 🚀[](#time-to-test-and-ship-whatsapp-node-)\n\nUse the **`POST`** method to call the API and return the whatsapp message object.\n\nYou can test the node in 'Node Editor'\n\n![WhatsApp node in editor](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ftest-node.dc26000d.png&w=1920&q=75)\n\nTest the Deployment\n\n![WhatsApp node in postman](https://docs.buildship.com/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ftest-post.669d0191.png&w=1920&q=75)\n\n### Steps to get a permanent access token (never expires)[](#steps-to-get-a-permanent-access-token-never-expires)\n\nUnderstanding the necessity of incorporating a bearer token within the Authorization header of an HTTP request is informative, yet it's only the tip of the iceberg. The access tokens you've encountered thus far are essentially ephemeral. It's likely that you aim to enable your application to interact with the API beyond a mere 24-hour timeframe, which necessitates the creation of a more enduring access token.\n\nAll you need to do is add a System User to your business account to obtain an access token you can use to continue accessing the API.\n\n#### To create a system user, do the following:[](#to-create-a-system-user-do-the-following)\n\n*   Go to Business Settings [here (opens in a new tab)](https://developers.facebook.com/micro_site/url/?click_creative_path%5B0%5D=link&ums_creative_detail=link%26device_type%3Ddesktop&click_from_context_menu=true&country=IN&destination=https%3A%2F%2Fbusiness.facebook.com%2Fsettings&event_type=click&last_nav_impression_id=0AEeFjch8mUN92OaY&max_percent_page_viewed=90&max_viewport_height_px=984&max_viewport_width_px=1850&orig_request_uri=https%3A%2F%2Fdevelopers.facebook.com%2Fblog%2Fpost%2F2022%2F12%2F05%2Fauth-tokens%2F&region=apac&scrolled=true&session_id=1VV5dHDVNht7DIriz&site=developers&extra_data%5Bcreate_type%5D=link&extra_data%5Bcreate_type_detail%5D=&extra_data%5Bcreative_detail%5D=link%26device_type%3Ddesktop).\n*   Select the business account your app is associated with.\n*   Below Users, click System Users.\n*   Click Add.\n*   Name the system user, choose Admin as the user role, and click Create System User.\n*   Select the whatsapp\\_business\\_messaging permission.\n*   Click Generate New Token.\n*   Copy and save your token.\n\nYour access token is a random string of letters and numbers."
},
{
  "markdown": "## Supabase Integration\n\nThis integration allows you to work with Supabase database in low-code/no-code style. Using BuildShip, you can connect to your Supabase database easily and build APIs, scheduled jobs and any backend workflow automation or cloud functions on top of your Supabase database - without the need to code.\n\nYou can use 100s of prebuilt nodes, tempaltes and connectors to popular tools and AI models like Replicate, OpenAI etc. And if any integration is missing, you can simply ask AI and it will generate one for you right from BuildShip's UI.\n\n### How to build Supabase Cloud Functions with no code[](#how-to-build-supabase-cloud-functions-with-no-code)\n\n*   Trigged on Supabase data changes i.e. anytime a new row of data is created, updated or deleted\n*   Or even when new user signs up via Supabase Authentication\n*   Or at specific times of the day/week/month/year\n*   Function is created visually without code\n*   Comes with 100s of prebuilt nodes for your function building including AI models, third party tools\n*   If anything is missing your can generate the logic steps of the function with AI and edit code if you would like\n\n### Perform CRUD operations[](#perform-crud-operations)\n\n*   In your backend workflows, scheduled jobs or APIs\n*   Read, create (or upsert), update, delete, data in your Supabase database\n\n### Connect to any AI model or third party tools[](#connect-to-any-ai-model-or-third-party-tools)\n\n*   You can connect your to any AI model on BuildShip to generate content and get it stored on Supabase\n*   Work with any tools or integrations with ease and with help of AI"
}]